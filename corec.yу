%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "corec.tab.h"

extern int yylineno; 
int yylex();           
void yyerror(const char* s); 

FILE *output_file; 

// -------------------------------------------------
// Таблица символов (как было у вас)
typedef enum { SYM_VAR, SYM_ARR /* , SYM_FUNC, ... */ } SymType;

typedef struct Symbol {
    char* name;
    SymType kind;
    struct Symbol* next;
} Symbol;

Symbol* symbolTable = NULL;

Symbol* addSymbol(const char* name, SymType kind) {
    // Проверка на дубликаты (упрощённая)
    Symbol* p = symbolTable;
    while (p) {
        if (strcmp(p->name, name) == 0) {
            // Уже есть такой символ, вернём его
            return p;
        }
        p = p->next;
    }
    // Создаём новый
    Symbol* s = (Symbol*)malloc(sizeof(Symbol));
    s->name = strdup(name);
    s->kind = kind;
    s->next = symbolTable;
    symbolTable = s;
    return s;
}

// Декларации, чтобы не было конфликтов
extern int yylineno; 
int yylex();           
void yyerror(const char* s);

FILE *output_file; 

// -------------------------------------------------
// Для вывода в MIPS
// -------------------------------------------------

// Функция для генерации .data секции
void emitDataSection(FILE* out) {
    fprintf(out, ".data\n");
    Symbol* p = symbolTable;
    while (p) {
        if (p->kind == SYM_VAR) {
            // Для переменной - слово
            fprintf(out, "%s: .word 0\n", p->name);
        }
        else if (p->kind == SYM_ARR) {
            // Условно место под массив
            fprintf(out, "%s: .space 40\n", p->name);
        }
        p = p->next;
    }
}

// Для простоты, скажем, что любое выражение хранит результат в $t0.
// (На деле вы бы рекурсивно генерировали код для e, t, f, etc.)

// var = expr
void genAssign(const char* varName) {
    fprintf(output_file, "# %s = <expr>\n", varName);
    fprintf(output_file, "sw $t0, %s\n", varName);
}

// var += expr
void genPlusAssign(const char* varName) {
    fprintf(output_file, "# %s += <expr>\n", varName);
    fprintf(output_file, "lw $t1, %s\n", varName);
    fprintf(output_file, "add $t1, $t1, $t0\n");
    fprintf(output_file, "sw $t1, %s\n", varName);
}

// var -= expr
void genMinusAssign(const char* varName) {
    fprintf(output_file, "# %s -= <expr>\n", varName);
    fprintf(output_file, "lw $t1, %s\n", varName);
    fprintf(output_file, "sub $t1, $t1, $t0\n");
    fprintf(output_file, "sw $t1, %s\n", varName);
}

// var *= expr
void genMultAssign(const char* varName) {
    fprintf(output_file, "# %s *= <expr>\n", varName);
    fprintf(output_file, "lw $t1, %s\n", varName);
    fprintf(output_file, "mul $t1, $t1, $t0\n");
    fprintf(output_file, "sw $t1, %s\n", varName);
}

// var /= expr
void genDivAssign(const char* varName) {
    fprintf(output_file, "# %s /= <expr>\n", varName);
    fprintf(output_file, "lw $t1, %s\n", varName);
    fprintf(output_file, "div $t1, $t0\n"); // В MARS: div $t1, $t0 => hi/lo
    fprintf(output_file, "mflo $t1\n");
    fprintf(output_file, "sw $t1, %s\n", varName);
}

// read(var)
void genRead(const char* varName) {
    fprintf(output_file, "# read %s\n", varName);
    fprintf(output_file, "li $v0, 5   # syscall read_int\n");
    fprintf(output_file, "syscall\n");
    fprintf(output_file, "sw $v0, %s\n", varName);
}

// print(var)
void genPrint(const char* varName) {
    fprintf(output_file, "# print %s\n", varName);
    fprintf(output_file, "lw $a0, %s\n", varName);
    fprintf(output_file, "li $v0, 1\n");
    fprintf(output_file, "syscall\n");
    // печать перевода строки
    fprintf(output_file, "la $a0, newline\n");
    fprintf(output_file, "li $v0, 4\n");
    fprintf(output_file, "syscall\n");
}

// printstr("...")
void genPrintStr(const char* str) {
    static int strCount = 0;
    char label[32];
    sprintf(label, "strlbl_%d", strCount++);
    fprintf(output_file, ".data\n");
    fprintf(output_file, "%s: .asciiz \"%s\"\n", label, str);
    fprintf(output_file, ".text\n");
    fprintf(output_file, "# print string\n");
    fprintf(output_file, "la $a0, %s\n", label);
    fprintf(output_file, "li $v0, 4\n");
    fprintf(output_file, "syscall\n");
}

// -------------------------------------------------------
// Простейший enum, чтобы хранить, какой оператор (op)
// -------------------------------------------------------
enum {
    OP_NONE=0,
    OP_PLUS,
    OP_MINUS,
    OP_MULT,
    OP_DIV
};

// ---------------------
// Функции для склеивания строк 
// ---------------------
static char* concat2(const char* s1, const char* s2) {
    if (!s1) s1 = "";
    if (!s2) s2 = "";
    size_t len = strlen(s1) + strlen(s2) + 1;
    char* result = (char*)malloc(len);
    if (!result) {
        fprintf(stderr, "Out of memory\n");
        exit(1);
    }
    strcpy(result, s1);
    strcat(result, s2);
    return result;
}

static char* concat3(const char* s1, const char* s2, const char* s3) {
    char* tmp = concat2(s1, s2);
    char* out = concat2(tmp, s3);
    free(tmp);
    return out;
}

%}

%start program

%union {
    int num; 
    float flt;     
    char* str;
    int op_type;  // для хранения типа оператора
}

%token LOC
%token <num> NUMBER
%token <flt> FLOTTANT
%token <str> ID
%token <str> CHAINE

%token PROG DEF MAIN DOM REC IN IN_SIMPLE OUT INOUT PRINTSTR PRINT READ
%token EQUALS SEMICOLON COMMA LBRACE RBRACE LBRACKET RBRACKET LPAREN RPAREN
%token PLUS MINUS MULT DIV QUESTION COLON DOTDOT PERCENT EQUAL
%token LT GT LE GE EQ

%left PLUS MINUS
%left MULT DIV
%left LT GT LE GE EQ

%right QUESTION COLON

%type <str> arrayref
%type <op_type> op

/* Новый момент — добавляем, чтобы Bison знал, 
   что e, t, f возвращают строки (MIPS-код). */
%type <str> e t f

%debug

%%

program:
    PROG ID LBRACE lfonc DEF MAIN LBRACE loc_section dom_section rec_section RBRACE RBRACE
    {
        // В конце парсинга: выводим таблицу символов (переменные) в .data
        emitDataSection(output_file);

        // Добавим "служебные" данные (например, для переноса строки)
        fprintf(output_file, "newline: .asciiz \"\\n\"\n");

        // Начинаем секцию кода
        fprintf(output_file, ".text\n.globl main\n");
        fprintf(output_file, "main:\n");
        // ... Можно добавить что-то ещё ...
        // Завершаем программу:
        fprintf(output_file, "\n# End of main\n");
        fprintf(output_file, "li $v0, 10   # syscall exit\n");
        fprintf(output_file, "syscall\n");
    }
;

lfonc:
    lfonc fonc
    | /* epsilon */
;

fonc:
    DEF ID LBRACE args loc_section dom_section rec_section RBRACE
    {
        // addSymbol($2, SYM_FUNC) — можно при желании
    }
;

loc_section:
    LOC ldecl
    | LOC 
    | /* epsilon */
;

ldecl:
    ldecl COMMA decl
    | decl
;

decl:
    ID
    {
      addSymbol($1, SYM_VAR);
    }
  | ID EQUALS e
    {
      addSymbol($1, SYM_VAR);
      // Выводим код, который вычисляет e (в $t0)
      fprintf(output_file, "%s", $3);
      // Теперь делаем genAssign
      genAssign($1);

      free($3); // освобождаем строку (если надо)
    }
  | array
    {
      // Добавляем массив, если хотите
      // addSymbol(..., SYM_ARR);
    }
;

array:
    LPAREN ID COMMA dlist RPAREN
;

dlist:
    dlist COMMA e
    | e
;

/****************************************************************************
 *  Раздел для разбора [in: N; out: (f,N)] и т. п.
 ****************************************************************************/

args:
    LBRACKET RBRACKET
  | LBRACKET io_sections RBRACKET
  ;

io_sections:
    sectionlist
;

sectionlist:
    sectionlist SEMICOLON section
  | section
;

section:
    in_section
  | out_section
  | inout_section
;


maybe_out:
    SEMICOLON out_section
  | SEMICOLON inout_section
  | /* empty */
  ;


in_section:
    IN param_list
;

out_section:
    OUT param_list
;

inout_section:
    INOUT param_list
;

param_list:
    param_list COMMA param
  | param
;

param:
    ID
  | LPAREN id_list RPAREN
;

id_list:
    id_list COMMA ID
  | ID
;

dom_section:
    DOM domlist 
    | DOM 
    | /* epsilon */
;

domlist:
    domlist COMMA d
    | d
;

d:
    ID IN_SIMPLE LBRACKET e DOTDOT e RBRACKET
;

rec_section:
    REC blockinst
;

blockinst:
    LBRACE listei RBRACE
    | i
;

listei:
    | listei SEMICOLON i
    | i
;

/* Основное место, где обрабатываем инструкции */
i:
    /* arrayref op EQUALS e */
    arrayref op EQUALS e
      {
        // (Можно дописать код вычисления e -> $t0)
        // Но для простоты "не делаем codeGen(e)" - вставьте, если нужно
        // Сейчас мы выводим заглушку — 
        fprintf(output_file, "%s", $4); // вывести код expr
        // Затем псевдокод для присвоения в массив
        fprintf(output_file, "# arrayref assign\n");
        fprintf(output_file, "la $t2, %s  # base address of array %s\n", $1, $1);
        fprintf(output_file, "li $t1, 0\n");
        fprintf(output_file, "add $t2, $t2, $t1\n");
        fprintf(output_file, "sw $t0, 0($t2)\n");

        free($1);
        free($4);
      }
    /* ID op EQUALS e */
    | ID op EQUALS e
      {
        addSymbol($1, SYM_VAR);

        // Сначала выводим код e (чтобы вычислить в $t0)
        fprintf(output_file, "%s", $4);

        // Затем обрабатываем оператор =, +=, ...
        if ($2 == OP_NONE) {
          genAssign($1);
        }
        else if ($2 == OP_PLUS) {
          genPlusAssign($1);
        }
        else if ($2 == OP_MINUS) {
          genMinusAssign($1);
        }
        else if ($2 == OP_MULT) {
          genMultAssign($1);
        }
        else if ($2 == OP_DIV) {
          genDivAssign($1);
        }

        free($4);
      }
    | READ LPAREN ID RPAREN
      {
        addSymbol($3, SYM_VAR);
        genRead($3);
      }
    | PRINT LPAREN ID RPAREN
      {
        genPrint($3);
      }
    | PRINTSTR LPAREN CHAINE RPAREN
      {
        genPrintStr($3);
      }
    | call
    | PRINT LPAREN precinst RPAREN
    | cond
    | PRINT LPAREN call RPAREN
;

/* Упрощенный способ различать +=, -=, *=, /= vs. = */
op:
    PLUS { $$ = OP_PLUS; }
  | MINUS { $$ = OP_MINUS; }
  | MULT { $$ = OP_MULT; }
  | DIV { $$ = OP_DIV; }
  | /* epsilon */ { $$ = OP_NONE; }
;

/* Вызовы функций — пока не реализованы полноценно */
call:
    | ID LPAREN lcall RPAREN
    | ID LPAREN RPAREN
;

lcall:
    lcall COMMA call
    | lcall COMMA precinst
    | call
    | precinst
;

precinst:
    PERCENT NUMBER
;

/* arrayref: ID [ elist ] */
arrayref:
  ID LBRACKET elist RBRACKET
  {
    // Просто хранить имя массива в $$ = $1
    $$ = $1;
  }
;

elist:
    elist COMMA e
    | e
;

/* 
   -- САМЫЙ ВАЖНЫЙ БЛОК: e, t, f --
   Здесь мы генерируем код "на лету", 
   чтобы в конце каждого подвыражения 
   результат лежал в $t0.
*/

e:
    e PLUS t
    {
      // 1) Код левого e -> $t0
      // 2) move $t1, $t0
      // 3) Код правого t -> $t0
      // 4) add $t0, $t1, $t0
      char* part1 = concat2($1, "  # e PLUS t\n  move $t1, $t0\n");
      char* part2 = concat2(part1, $3);
      free(part1);
      char* final = concat2(part2, "  add $t0, $t1, $t0\n");
      free(part2);
      $$ = final;
    }
  | e MINUS t
    {
      char* p1 = concat2($1, "  # e MINUS t\n  move $t1, $t0\n");
      char* p2 = concat2(p1, $3);
      free(p1);
      char* fin = concat2(p2, "  sub $t0, $t1, $t0\n");
      free(p2);
      $$ = fin;
    }
  | MINUS e
    {
      // унарный минус
      char* fin = concat2($2, "  # unary minus\n  neg $t0, $t0\n");
      $$ = fin;
    }
  | t
    {
      $$ = $1; // просто проброс
    }
;

t:
    t MULT f
    {
      char* p1 = concat2($1, "  # t MULT f\n  move $t1, $t0\n");
      char* p2 = concat2(p1, $3);
      free(p1);
      char* fin = concat2(p2, "  mul $t0, $t1, $t0\n");
      free(p2);
      $$ = fin;
    }
  | t DIV f
    {
      char* p1 = concat2($1, "  # t DIV f\n  move $t1, $t0\n");
      char* p2 = concat2(p1, $3);
      free(p1);
      char* fin = concat2(p2, "  div $t1, $t0\n  mflo $t0\n");
      free(p2);
      $$ = fin;
    }
  | t PERCENT f
    {
      char* p1 = concat2($1, "  # t % f\n  move $t1, $t0\n");
      char* p2 = concat2(p1, $3);
      free(p1);
      char* fin = concat2(p2, "  div $t1, $t0\n  mfhi $t0\n");
      free(p2);
      $$ = fin;
    }
  | f
    {
      $$ = $1;
    }
;

f:
    LPAREN e RPAREN
    {
      $$ = $2; 
    }
  | NUMBER
    {
      char buf[64];
      sprintf(buf, "  li $t0, %d\n", $1);
      $$ = strdup(buf);
    }
  | ID
    {
      // загрузить переменную (из памяти)
      char buf[64];
      sprintf(buf, "  lw $t0, %s\n", $1);
      $$ = strdup(buf);
    }
  | call
    {
      $$ = strdup("# call - not implemented\n");
    }
  | arrayref
    {
      // если хотим при f: arrayref грузить значение массива, нужно:
      // 1. вычислить индекс
      // 2. la $t2, ...
      // 3. lw $t0, 0($t2)
      // Пока заглушка:
      $$ = strdup("# f: arrayref - not implemented\n");
    }
  | FLOTTANT
    {
      $$ = strdup("# float not fully handled\n");
    }
;

/* cond: e oprel e ? b : b - пока без генерации */
cond:
    e oprel e QUESTION b COLON b
;

b:
    blockinst
;

oprel:
    LT  
  | GT  
  | LE  
  | GE  
  | EQ  
;

%%

void yyerror(const char* s) {
    fprintf(stderr, "Error: %s at line %d\n", s, yylineno);
}

